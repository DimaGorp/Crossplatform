@{
    ViewData["Title"] = "Lab 3";
}

<h2>Lab 3</h2>

@if (ViewBag.ErrorMessage != null)
{
    <p style="color:red;">@ViewBag.ErrorMessage</p>
}

@if (ViewBag.SuccessMessage != null)
{
    <p style="color:green;">@ViewBag.SuccessMessage</p>
}

<!-- Опис завдання -->
<div>
    <h3>Варіант 16</h3>
    <h3>Завдання</h3>
    <p>
        Група солдатів-новобранців прибула до армійської частини N666. Після знайомства з прапорщиком стало очевидним, що від робіт на кухні з очищення картоплі врятувати солдатів може лише диво.
        Прапорщик, будучи неспроможним запам'ятати прізвища, пронумерував новобранців від 1 до N. Після цього він наказав їм побудуватися за зростанням (починаючи з найвищого). 
        З цим нескладним завданням можуть впоратися навіть зовсім ненавчені новобранці, та ось біда: прапорщик запевнив себе, що знає про деяких солдатів, хто з них кого вищий, 
        і це далеко не завжди відповідає істині.
    </p>
    <p>
        Після трьох днів навчання новобранцям удалося з'ясувати, що знає (а точніше, думає, що знає) прапорщик. Допоможіть їм, використовуючи ці знання, побудуватись так, 
        щоб товариш прапорщик залишився задоволений.
    </p>
    <h4>Вхідні дані</h4>
    <p>
        У вхідному файлі <code>INPUT.TXT</code> спочатку йдуть числа <code>N</code> і <code>M</code> (1 ≤ N ≤ 100, 1 ≤ M ≤ 5000) — кількість солдатів у роті та кількість пар солдатів, 
        про які прапорщик знає, хто з них вищий. Далі йдуть ці пари чисел <code>A</code> і <code>B</code> по одному рядку (1 ≤ A,B ≤ N), що означає, що, на думку прапорщика, 
        солдат <code>A</code> вищий за солдата <code>B</code>.
    </p>
    <h4>Вихідні дані</h4>
    <p>
        У вихідний файл <code>OUTPUT.TXT</code> виведіть <code>"Yes"</code>, якщо можна побудуватися так, щоб прапорщик залишився задоволеним, і <code>"No"</code>, якщо не можна.
    </p>
    <h4>Приклад</h4>
    <table style="border-collapse: collapse; width: 60%; text-align: left; border: 1px solid #ddd;">
        <thead>
            <tr>
                <th style="border: 1px solid #ddd; padding: 8px;">№</th>
                <th style="border: 1px solid #ddd; padding: 8px;">INPUT.TXT</th>
                <th style="border: 1px solid #ddd; padding: 8px;">OUTPUT.TXT</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="border: 1px solid #ddd; padding: 8px;">1</td>
                <td style="border: 1px solid #ddd; padding: 8px; white-space: pre;">5 4<br>1 3<br>1 4<br>4 3<br>5 2</td>
                <td style="border: 1px solid #ddd; padding: 8px;">Yes</td>
            </tr>
        </tbody>
    </table>
    <br><br>
</div>


<form asp-controller="LabSelector" asp-action="RunLab" method="post" enctype="multipart/form-data">
    <input type="hidden" name="labName" value="Lab3" />

    <label for="inputFile">Select Input File:</label>
    <input type="file" id="inputFile" name="inputFile" accept=".txt" required />
    <br />
    <div>
        <strong>Input File Content:</strong>
        <pre id="inputFileContent" style="border: 1px solid #ddd; padding: 10px; max-height: 200px; overflow-y: auto;"></pre>
    </div>
    <br />

    <label for="outputFile">Select Output File:</label>
    <input type="file" id="outputFile" name="outputFile" accept=".txt" required />
    <br />
    <div>
        <strong>Output File Content:</strong>
        <pre id="outputFileContent" style="border: 1px solid #ddd; padding: 10px; max-height: 200px; overflow-y: auto;"></pre>
    </div>
    <br />

    <button type="submit">Run Lab 3</button>
</form>

@if (ViewBag.InputFileContent != null && ViewBag.OutputFileContent != null)
{
    <div>
        <h3>Input File Content:</h3>
        <pre>@ViewBag.InputFileContent</pre>
        <h3>Output File Content:</h3>
        <pre>@ViewBag.OutputFileContent</pre>
    </div>
}

<script>
    let lastInputFile = null;
    let lastOutputFile = null;

    function displayFileContent(file, targetId) {
        const target = document.getElementById(targetId);

        if (file) {
            const reader = new FileReader();

            // When the file is read successfully, update the target element
            reader.onload = function (e) {
                target.textContent = e.target.result;
            };

            // Read the file as text
            reader.readAsText(file);
        } else {
            target.textContent = "No file selected.";
        }
    }

    function monitorFileInputs() {
        const inputFileElement = document.getElementById("inputFile");
        const outputFileElement = document.getElementById("outputFile");

        // Check if the input file has changed
        if (inputFileElement.files[0] !== lastInputFile) {
            lastInputFile = inputFileElement.files[0];
            displayFileContent(lastInputFile, "inputFileContent");
        }

        // Check if the output file has changed
        if (outputFileElement.files[0] !== lastOutputFile) {
            lastOutputFile = outputFileElement.files[0];
            displayFileContent(lastOutputFile, "outputFileContent");
        }
    }

    // Continuously monitor the input fields every 500ms
    setInterval(monitorFileInputs, 500);
</script>
